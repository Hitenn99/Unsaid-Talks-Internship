# ASSIGNMENT - 1

#Numpy Array Exercise: Generate a 4*4 numpy array with random values between 0 and 1, then extract and display the second row 
# using proper indexing techniques.
import numpy as np

# Generate a 4x4 NumPy array with random values between 0 and 1
array = np.random.rand(4, 4)

# Display the full array
print("üî¢ 4x4 Random Array:\n", array)

# Extract and display the second row (index 1)
second_row = array[1]
print("\n‚û°Ô∏è Second Row:\n", second_row)
######################################################################################################################################################################################

import pandas as pd

# Sample data for tax calculation
data = {
    'Customer Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Product': ['Laptop', 'Phone', 'Tablet', 'Monitor', 'Keyboard'],
    'Sale Amount': [75000, 30000, 20000, 15000, 5000],
    'Tax Rate (%)': [18, 12, 18, 12, 5]
}

# Create DataFrame
df = pd.DataFrame(data)

# Save to CSV file
df.to_csv('sales_data.csv', index=False)

print("‚úÖ CSV file 'sales_data.csv' created.")

import pandas as pd

file_path = 'sales_data.csv'

# Load the CSV file into a DataFrame
df = pd.read_csv(file_path)

# Display the first 5 rows of the DataFrame
print("First 5 rows of the sales data:")
print(df.head())

#########################################################################################################################################################################

# Data Frame Calculation....

import pandas as pd

# Sample DataFrame
data = {
    'product': ['Laptop', 'Phone', 'Tablet', 'Monitor'],
    'revenue': [75000, 30000, 20000, 15000]
}

df = pd.DataFrame(data)

# Calculate 5% sales tax and store in a new column 'sales_tax'
df['sales_tax'] = df['revenue'] * 0.05

# Display the updated DataFrame
print(df)

########################################################################################################################################################################

# Conditional Data Filtering : Using Boolean Indexing ,Filter a Data Frame to display only employees with annual salaries below 
#$60,000, and verify the result with appropriate methods....

import pandas as pd

# Sample employee data
data = {
    'Employee Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Department': ['HR', 'IT', 'Finance', 'IT', 'Sales'],
    'Annual Salary': [55000, 72000, 48000, 61000, 45000]
}

# Create DataFrame
df = pd.DataFrame(data)

# Apply Boolean Indexing to filter salaries below 60000
filtered_df = df[df['Annual Salary'] < 60000]

# Display the filtered DataFrame
print("Employees with salaries below $60,000:")
print(filtered_df)

# ‚úÖ Verification: Ensure all salaries in result are below 60000
print("\nVerification - Max salary in filtered data:", filtered_df['Annual Salary'].max())

